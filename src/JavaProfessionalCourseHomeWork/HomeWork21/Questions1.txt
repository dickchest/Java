Уровень 1
1. Что такое Throwable?
В Java Throwable является базовым классом для всех исключений (exceptions) и ошибок (errors). Throwable является суперклассом для двух основных подклассов: Exception и Error.

2. Что такое Error?
В Java Error является подклассом класса Throwable и представляет серьезные проблемы, которые обычно не могут быть восстановлены во время выполнения программы. Ошибки в Java обычно свидетельствуют о серьезной проблеме в системе, которую необходимо решать на уровне операционной системы или оборудования, например:
- OutOfMemoryError - возникает, когда приложение пытается выделить больше памяти, чем доступно в системе;
- StackOverflowError - возникает, когда программа вызывает слишком много методов, и стек вызовов методов переполняется;
- LinkageError - возникает, когда происходит ошибка в процессе загрузки класса;
- IOError - возникает, когда происходит ошибка ввода/вывода;
и другие.

3. В чем отличие checked и unchecked? можно ли поймать unchecked exception?
Различие между checked и unchecked исключениями в Java связано с тем, как компилятор исходного кода и виртуальная машина Java (JVM) обрабатывают их.

Checked исключения (checked exceptions) это исключения, которые должны быть объявлены в сигнатуре метода с помощью ключевого слова "throws". Они обычно связаны с ошибками, которые могут возникнуть в процессе выполнения метода, но которые могут быть обработаны в вызывающем коде. Например, IOException может возникнуть при работе с файлами, и его необходимо обработать в вызывающем коде.

Unchecked исключения (unchecked exceptions) это исключения, которые не требуют объявления в сигнатуре метода, и которые могут возникнуть в любой точке выполнения программы. Они обычно связаны с ошибками, которые не могут быть обработаны программным кодом, и которые указывают на серьезные проблемы в работе программы или в окружении, например, NullPointerException, ClassCastException, и т.д.

В отличие от checked исключений, unchecked исключения не требуют обработки их в вызывающем коде, но их можно поймать и обработать с помощью конструкции try-catch. Однако, в большинстве случаев, лучше избегать попыток перехвата unchecked исключений, и решать проблемы, которые приводят к их возникновению.

Важно отметить, что RuntimeException и его подклассы являются unchecked исключениями, но другие подклассы класса Exception могут быть как checked, так и unchecked исключениями в зависимости от того, объявлены они в сигнатуре метода или нет.

4. В чем разница throw и throws? Где какой используется?
разница между throw и throws состоит в том, что оператор throw используется для генерации исключения, а ключевое слово throws используется для объявления списка исключений, которые может генерировать метод.

5. Что можно поймать в catch? В каком порядке отрабатываются catch в try/catch/finally?
В блоке catch можно поймать объект исключения (Exception), который был сгенерирован в блоке try, а также его подклассы или любые другие объекты, которые могут быть приведены к типу исключения или его суперклассу

Порядок отработки блоков catch в блоке try/catch/finally следующий:
- Первым проверяется соответствие исключения типу первого блока catch. Если исключение соответствует типу первого блока catch, то выполняется код этого блока, и обработка исключения заканчивается.
- Если исключение не соответствует типу первого блока catch, то проверяется соответствие исключения типу второго блока catch. Если исключение соответствует типу второго блока catch, то выполняется код этого блока, и обработка исключения заканчивается.
- Процесс продолжается до тех пор, пока не будет найден блок catch, соответствующий типу исключения. Если ни один из блоков catch не соответствует типу исключения, то исключение переходит в вызывающий код, если он существует, или в виртуальную машину Java.
- Если в блоке try был использован блок finally, то он будет выполнен после того, как будет выполнен блок catch, соответствующий типу исключения.

6. Для чего нужен finally? Всегда ли отработает finally?
Блок finally в Java используется для написания кода, который должен быть выполнен независимо от того, было ли исключение сгенерировано или нет. Блок finally выполняется после того, как выполнится блок try или блок catch, даже если произошло исключение и оно не было обработано.
Отработка блока finally не гарантирована в некоторых случаях, например, если произойдет сбой в процессе работы виртуальной машины Java или если выполнение программы будет прервано вызовом System.exit(). Однако в обычных условиях блок finally всегда будет выполнен.

7. В чем разница между final/finally/finalyze?
- final обозначает неизменяемую константу или класс
- finally используется в строении try/catch/finally
- finalize запускается при очищении обекта сборщиком мусора

8. Если поймать OutOfMemoryError в catch и запустить System.gc(), высвободит ли это память и поможет ли программе?
System.gc не дает гарантию чистки в момент запуска

9. Можно положить Exception внутрь Exception?
Да. джава поддерживает иерархию исключений, которая позволяет создавать исключения на основе других исключений

10. Государство пытается сдержать цену на хлеб, создайте метод, который будет проверять цену хлеба и если он больше 8 евро, то будет выкидывать Exception(желательно создать свой Exception) с сообщением хлеб слишком дорой

11. Напишите метод buyFood, внутри метода вызовите методы buyBread(используйте логику из предыдущей задачи), buyMeat, необходимо чтобы мы не падали, если при покупке хлеба выкинулась ошибка (используйте try/catch)

Уровень 2
1. Нужно написать class DayInMonthValidator с методом validate, который будет принимать 2 числа номер месяца и число
- месяцы должны быть в промежутке между 1 и 12, иначе выкинуть ошибку, что номер месяца невалидный
- количество дней в месяце зависит от номера месяца (считаем что в феврале всегда 28 дней), если больше или меньше 0, выкинуть какой-нибудь созданный свой Exception
2. Возьмите предыдущий пример и выкидывайте экспешен с информацией, что пришло на вход и что является допустим значением