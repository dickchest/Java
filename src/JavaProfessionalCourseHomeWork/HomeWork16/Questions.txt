Уровень 1
1. Что такое Generics?
Дженерики - это механизм программирования, который позволяет создавать универсальные классы и функции, которые могут работать с различными типами данных. Они позволяют написать код, который может быть использован с различными типами данных, без необходимости создания отдельных версий для каждого типа данных. Это делает код более гибким, повышает его переиспользуемость и уменьшает количество дублирования кода.

2. Что такое Generic class?
Generic class (обобщенный класс) в Java - это класс, который может работать с разными типами данных. Вместо того, чтобы определить конкретный тип данных, который будет использоваться в классе, мы определяем параметр типа (тип-аргумент), который может быть заменен на любой конкретный тип данных при создании объекта класса. Таким образом, обобщенный класс позволяет создавать универсальные классы, которые могут быть использованы с различными типами данных, без необходимости создания отдельных версий для каждого типа данных

3. Какие плюсы и минусы у Generics?
Плюсы Generics в Java:
- Безопасность типов. Обобщенные типы позволяют компилятору проверять типы данных на этапе компиляции, что обеспечивает безопасность типов при выполнении программы.
- Повышение читабельности кода. Обобщенные типы улучшают читабельность кода, поскольку они позволяют указывать явно, какие типы данных используются в коде.
- Повышение гибкости. Обобщенные типы позволяют создавать универсальные классы и методы, которые могут работать с различными типами данных, без необходимости создания отдельных версий для каждого типа данных. Это повышает гибкость кода и уменьшает дублирование кода.
- Производительность. Обобщенные типы позволяют улучшить производительность, так как они позволяют избежать создания объектов-оберток для примитивных типов данных.

Минусы Generics в Java:
- Сложность понимания. Обобщенные типы могут быть сложными для понимания, особенно для новичков в программировании.
- Дополнительная память. Использование обобщенных типов может привести к дополнительному использованию памяти, так как каждый объект-обертка требует дополнительной памяти для хранения метаданных типа.
- Ограничения использования. Иногда обобщенные типы не могут быть использованы в некоторых частях кода, например, в низкоуровневом коде, который работает непосредственно с памятью.

4. Что такое diamond operator?
упрощение записи, где опускается указание повторно типа данных
Когда используется diamond operator, компилятор самостоятельно выводит тип данных на основе типа аргументов, переданных в конструктор обобщенного класса. Вместо явного указания типа данных, используется символ "<>", который выглядит как бриллиант.

5. Что знаете про wildcards?
ограничения, наложенные на типы данных
это механизм, который позволяет работать с неизвестными типами данных в обобщенном коде. Wildcards используются для обозначения типа данных, который не известен во время компиляции.

6. Переделайте MyLinkedList из одной из предыдущих домашек, чтобы он был generic class
7. Переделайте Tree чтобы он был generic class
8. Переделайте Graph чтобы он был generic class
9. Напишите класс Database (который в качестве хранения использует Map<K,V>), база должна быть параметризована двумя параметрами - ключ и значение,
ограничение - ключ должен быть наследником Number

Уровень 2

1. Напишите метод нахождения максимального значения для:

Любого листа (он должен быть generic)- параметры лист и компаратор
Листа элементов (элементы должны быть наследниками компарабл) - параметры лист
Любой коллекции (он должен быть generic)- параметры коллекция и компаратор
Коллекции элементов (элементы должны быть наследниками компарабл) - параметры коллекция