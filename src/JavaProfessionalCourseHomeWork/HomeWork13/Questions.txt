Уровень 1
1. Какие особенности есть у деревьев?
Дерево - это структура данных, которая представляет собой иерархическую структуру из узлов, где каждый элемент имеет один родительский узел и может иметь несколько дочерних узлов.
основные особенности:
- сортировка элементов: автоматически сортируют элементы в порядке возрастания и убывания
- уникальность элементов
- быстрый доступ к элементам
- рекурсивная структура

2. Какие виды прохода по дереву существуют?
BFS = Breadth First Search
Обход дерева по уровням
DFS = depth first search:
inorder (Left, Root, Right), preoder (Root, Left, Right), postorder (Left, Right, Root)

3. Что такое Binary Tree?
Binary Tree - это дерево, в котором каждый узел имеет не более двух дочерних узлов.

4. Могут ли быть циклы у дерева?
нет, ветви деревья не могут пересекаться

5. Может ли быть 2 родителя у одного узла? в два предка?
2х родителей не может быть. 2 и более предков может быть

6. Какое дерево лежит под капотом TreeMap?
красно-черное дерево

7. Какие особенности есть у красно-черного дерева?
Красно-черное дерево - это тип бинарного дерева поиска, который используется для хранения отсортированных данных. Оно получило свое название из-за того, что каждый узел дерева имеет цвет - красный или черный, и при этом все пути от корня до листьев содержат одинаковое число черных узлов.

Красно-черное дерево является сбалансированным деревом, что означает, что высота дерева остается примерно одинаковой независимо от количества элементов в дереве. Это делает красно-черные деревья быстрее для операций поиска, вставки и удаления, чем несбалансированные деревья, такие как обычные бинарные деревья поиска.

8. Integer - номер квартиры в доме, People(firstName, lastName) Используя TreeMap<Integer, People> заполните его 10 людьми с разными номерами квартир, ключ в мапе - номер квартиры, после выведите в консоль все значения

9. Создайте TreeMap где обход будет в обратном порядке (подсказка: для того чтобы указать другой порядок можно создать Comparator и передать как параметр конструктора TreeMap) и распечатайте результаты

Уровень 2

1. Напишите алгоритм обхода дерева в глубину (DFS) для примера из классной работы - Tree. Можно выбрать любой из проходов:
(Root, Left, Right)
(Left, Right, Root)
(Left, Root, Right) Решение можно написать через рекурсию или используя стек:
в случае с рекурсией происходит вызов функции на левом поддереве и на правом - нужно продумать об условии остановки рекурсии
в случае со стеком используйте стек как промежуточное хранилище для нод (находимся в while пока стек не пустой) - нужно класть в стек значения левого/правого поддерева