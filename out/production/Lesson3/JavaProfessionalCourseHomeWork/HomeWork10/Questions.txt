Уровень 1
1. Какой контракт стоит соблюдать при написании equals?
Рефлексивность
для любого заданного значения x, выражение x.equals(x) должно возвращать true.
Заданного — имеется в виду такого, что x != null
Симметричность
для любых заданных значений x и y, x.equals(y) должно возвращать true только в том случае, когда y.equals(x) возвращает true.
Транзитивность
для любых заданных значений x, y и z, если x.equals(y) возвращает true и y.equals(z) возвращает true, x.equals(z) должно вернуть значение true.
Согласованность
для любых заданных значений x и y повторный вызов x.equals(y) будет возвращать значение предыдущего вызова этого метода при условии, что поля, используемые для сравнения этих двух объектов, не изменялись между вызовами.
Сравнение null
для любого заданного значения x вызов x.equals(null) должен возвращать false.


2. Что такое StringPool? как вызвать сброс в StringPool?
специальное место в куче, в котором храняться исплючительно уникальные значения строковых литералов, а не все стрки подряд


3. Что такое Comparator? Что такое Comparable? Когда какой использовать?
В интерфейсе Comparable объявлен только один метод compareTo (Object obj), предназначенный для упорядочивания объектов класса.
Данный метод удобно использовать для сортировки списков или массивов объектов.
Интерфейс Comparable используется только для сравнения объектов класса, в котором данный интерфейс реализован.
Т.е. interface Comparable определяет логику сравнения объекта определенного ссылочного типа внутри своей
реализации (по правилам разработчика).
Comparator представляет отдельную реализацию и ее можно использовать многократно и с различными классами.
Т.е. interface Comparator позволяет создавать объекты, которые будут управлять процессом сравнения (например при сортировках).


4. Что важно соблюдать при имплементации интерфейса Comparable?
Класс должен реализовать интерфейс java.lang.Comparable


5. Солдаты всегда строились, строятся и будут строиться по убыванию роста. Отсортируй солдат, предварительно подумав, что лучше использовать при таких условиях - Comparable или Comparator. Реализовать класс Soldier. Можно с одним полем - рост. Создать коллекцию солдат и отсортировать ее. Что Вы используете - Comparable или Comparator - выбирать Вам, но нужно объяснить свой выбор.
Проще, мне кажеться, использовать комперебл, т.к. сортировка обычная, основанная на естественном порядке и не требует создания отдельного компаратора.


6. Создайте класс объявление, у объявления есть цена, название, описание, автор и год публикации, создайте объект газеты и заполните его 10 объявлениями, отсортируйте их, в первую очередь важен год, после название, автор и в последнюю очередь описание


7. Напишите 2 метода для нахождения максимального и минимально элемента в коллекции объявлений, для сравнения используйте Comparable или Comparator


Уровень 2
1. Создайте объект автора(имя, фамилия, год рождения), издательство(название, год основания), книгу(автор, год публикации, название, издательство)
2. На полке имеется 5 книг, нужно отсортировать книги:
- по году публикации
- по автору
- по названию
- по издательству
- в порядке возрастания имени и порядке убывания по автору
3. Отсортируйте авторов по году рождения и фамилии
4. Напишите мини-программу которая будет сортировать книги, программа будет спрашивать пользователя как он хочет сортировать (подумайте как можно сделать)
Например: программа пишет в консоль сортировать по имени? пользователь пишет да тогда спрашивать в каком порядке возрастание или убывание?

Пример работы в этом случае:

сортировать по имени?
да
в каком порядке возрастание или убывание?
возрастание
сортировать по году публикации?
нет
сортировать по автору?
да
в каком порядке возрастание или убывание?
убывание
сортировать по издательству?
нет
В итоге книги будут отсортированы в порядке возрастания имени и порядке убывания по автору